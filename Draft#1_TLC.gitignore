# work with B2

library(data.table) 
library(dplyr)
library(caret)
library(ggplot)
library(plotly)
library(zoo)

# try to merge all files tohether

multmerge = function(mypath){
            filenames=list.files(path=mypath, full.names=TRUE)
            datalist = lapply(filenames, function(x){read.table(file=x,header=T)})
            Reduce(function(x,y) {merge(x,y)}, datalist)
}
# I moved all files B2 to the one folder B2  
#/Users/38923/Desktop/Raw DataV- 1Z128GbX3/prog/mlc/B2
# NOT RUN (R terminated)
  b2 <- multmerge("#/Users/38923/Desktop/Raw DataV- 1Z128GbX3/prog/mlc/B2")
  b2 <- read.table("/Users/38923/Desktop/Raw DataV- 1Z128GbX3/prog/mlc/B2/b2")

  
  # Model1 with first set of data file #1 
  m1 <-  read.table("/Users/38923/Desktop/Raw DataV- 1Z128GbX3/prog/mlc/pp_program_MLC_B2_X2_D0_T001_B0000_P003_LP_3_80V_25_icc.dat")
  m1 %>% head
  m1 %>% dim
## can be used labrary(boot)
# install.packages("boot", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
# library(boot)
# bs <- function(formula, data, indices) {
#   d <- data[indices,] # allows boot to select sample 
#   fit <- lm(formula, data=d)
#   return(coef(fit)) 
# }
# mavg <- function(formula,data, indices) {
#   d <- data[indeces,]
#   fit <-rollmean()
# }
#   
# results_m1 <- boot(data= m1, statistic=bs, 
#                 R=100, formula=V2~V1)

## 1variant to use----------------------
require(zoo)
#for 1 us tial

# use rollapply to calculate function along a moving window 
# width is the width of the window

m1.MA<- rollapply( m1$V2 , width = 20 , by = 1 , mean )
m1.MA %>% head
hist.default(m1.MA)

# Now we use replicate to repeatedly evaluate a bootstrap sampling method
# 'n' is number of replications
n <- 100
resamp.100.20 <- as.data.frame(replicate( n , rollapply( m1$V2 , width = n , 
                              function(x) mean( x[ sample(length(x) , repl = TRUE) ] ) ) ) )

summary(resamp.100.20)
max.1.1us <- as.data.frame(apply(resamp.100.20, 2, max))
max.1.1us %>%  names
 
  names(max.1.20us)[1] <- "maxVal"
plot(max.1.20us$maxVal)
hist.default(max.1.20us$maxVal)

# for 1us require(zoo)-----------------------
require(zoo)
# use rollapply to calculate function along a moving window 
# width is the width of the window

m1.MA1us<- rollapply( m1$V2 , width = 20 , by = 1 , mean )
m1.MA1us %>% head
hist.default(m1.MA1us)

# Now we use replicate to repeatedly evaluate a bootstrap sampling method
# 'n' is number of replications
n <- 100
resamp.100.20 <- as.data.frame(replicate( n , rollapply( m1.MA1us , width = n , 
                                         function(x) mean( x[ sample(length(x) , repl = TRUE) ] ) ) ) )

#resamp.100.20.tri <- as.data.frame(replicate( n , rollapply( m1$V2 , width = 20, 
#                      function(x) mean( x[ sample(length(x) , repl = TRUE) ] ) ) ) )
resamp.100.20 %>% head
resamp.100.20 %>% dim()
summary(resamp.100.20)
max.1.1us <- as.data.frame(apply(resamp.100.20, 2, max))
max.1.1us %>%  names

names(max.1.1us)[1] <- "maxVal"
plot(max.1.1us$maxVal)
hist.default(max.1.1us$maxVal)
#done with 1us

#2 for 5us -----------------

# use rollapply to calculate function along a moving window 
# width is the width of the window

m1.MA5us<- rollapply( m1$V2 , width = 100 , by = 1 , mean )
m1.MA5us %>% head
hist.default(m1.MA5us)

# Now we use replicate to repeatedly evaluate a bootstrap sampling method
# 'n' is number of replications
n <- 100
resamp.100.100 <- as.data.frame(replicate( n , rollapply( m1.MA5us , width = n , 
                                                         
                  function(x) mean( x[ sample(length(x) , repl = TRUE) ] ) ) ) )

summary(resamp.100.100)
resamp.100.100 %>%  dim
max.1.5us <- as.data.frame(apply(resamp.100.100, 2, max))
max.1.5us %>%  names

names(max.1.5us)[1] <- "maxVal"
plot(max.1.5us$maxVal)
hist.default(max.1.5us$maxVal)

#3 for 20us--------------------------

# use rollapply to calculate function along a moving window 
# width is the width of the window

m1.MA20us<- rollapply( m1$V2 , width = 400 , by = 1 , mean )
m1.MA20us %>% head
hist.default(m1.MA20us)

# Now we use replicate to repeatedly evaluate a bootstrap sampling method
# 'n' is number of replications
n <- 100
resamp.100.400 <- as.data.frame(replicate( n , rollapply( m1.MA20us , width = n , 
                                                         function(x) mean( x[ sample(length(x) , repl = TRUE) ] ) ) ) )
resamp.100.400 %>% dim
summary(resamp.100.400)
max.1.20us <- as.data.frame(apply(resamp.100.400, 2, max))
max.1.20us %>%  names

names(max.1.20us)[1] <- "maxVal"
plot(max.1.20us$maxVal)
hist.default(max.1.20us$maxVal)

max.1us <- max(max.1.1us$maxVal)
max.1us
max.1us %>% str
max.5us <- max(max.1.5us$maxVal)
max.5us
max.20us <- max(max.1.20us$maxVal)
max.20us

result <- data.frame(max.1us, max.5us, max.20us)
result
